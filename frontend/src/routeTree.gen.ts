/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BlayoutImport } from './routes/_blayout'
import { Route as IndexImport } from './routes/index'
import { Route as AuthRegisterImport } from './routes/auth.register'
import { Route as AuthLoginImport } from './routes/auth.login'
import { Route as BlayoutBoardsIndexImport } from './routes/_blayout.boards.index'
import { Route as BlayoutBoardsBoardNameImport } from './routes/_blayout.boards.$boardName'

// Create/Update Routes

const BlayoutRoute = BlayoutImport.update({
  id: '/_blayout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const BlayoutBoardsIndexRoute = BlayoutBoardsIndexImport.update({
  id: '/boards/',
  path: '/boards/',
  getParentRoute: () => BlayoutRoute,
} as any)

const BlayoutBoardsBoardNameRoute = BlayoutBoardsBoardNameImport.update({
  id: '/boards/$boardName',
  path: '/boards/$boardName',
  getParentRoute: () => BlayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_blayout': {
      id: '/_blayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BlayoutImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/_blayout/boards/$boardName': {
      id: '/_blayout/boards/$boardName'
      path: '/boards/$boardName'
      fullPath: '/boards/$boardName'
      preLoaderRoute: typeof BlayoutBoardsBoardNameImport
      parentRoute: typeof BlayoutImport
    }
    '/_blayout/boards/': {
      id: '/_blayout/boards/'
      path: '/boards'
      fullPath: '/boards'
      preLoaderRoute: typeof BlayoutBoardsIndexImport
      parentRoute: typeof BlayoutImport
    }
  }
}

// Create and export the route tree

interface BlayoutRouteChildren {
  BlayoutBoardsBoardNameRoute: typeof BlayoutBoardsBoardNameRoute
  BlayoutBoardsIndexRoute: typeof BlayoutBoardsIndexRoute
}

const BlayoutRouteChildren: BlayoutRouteChildren = {
  BlayoutBoardsBoardNameRoute: BlayoutBoardsBoardNameRoute,
  BlayoutBoardsIndexRoute: BlayoutBoardsIndexRoute,
}

const BlayoutRouteWithChildren =
  BlayoutRoute._addFileChildren(BlayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof BlayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/boards/$boardName': typeof BlayoutBoardsBoardNameRoute
  '/boards': typeof BlayoutBoardsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof BlayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/boards/$boardName': typeof BlayoutBoardsBoardNameRoute
  '/boards': typeof BlayoutBoardsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_blayout': typeof BlayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/_blayout/boards/$boardName': typeof BlayoutBoardsBoardNameRoute
  '/_blayout/boards/': typeof BlayoutBoardsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/auth/login'
    | '/auth/register'
    | '/boards/$boardName'
    | '/boards'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/auth/login'
    | '/auth/register'
    | '/boards/$boardName'
    | '/boards'
  id:
    | '__root__'
    | '/'
    | '/_blayout'
    | '/auth/login'
    | '/auth/register'
    | '/_blayout/boards/$boardName'
    | '/_blayout/boards/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlayoutRoute: typeof BlayoutRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlayoutRoute: BlayoutRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_blayout",
        "/auth/login",
        "/auth/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_blayout": {
      "filePath": "_blayout.tsx",
      "children": [
        "/_blayout/boards/$boardName",
        "/_blayout/boards/"
      ]
    },
    "/auth/login": {
      "filePath": "auth.login.tsx"
    },
    "/auth/register": {
      "filePath": "auth.register.tsx"
    },
    "/_blayout/boards/$boardName": {
      "filePath": "_blayout.boards.$boardName.tsx",
      "parent": "/_blayout"
    },
    "/_blayout/boards/": {
      "filePath": "_blayout.boards.index.tsx",
      "parent": "/_blayout"
    }
  }
}
ROUTE_MANIFEST_END */
