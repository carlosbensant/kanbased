/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutAuthenticatedImport } from './routes/_layout/_authenticated'
import { Route as AuthRegisterRouteImport } from './routes/auth/register/route'
import { Route as AuthLoginRouteImport } from './routes/auth/login/route'
import { Route as LayoutAuthenticatedIndexImport } from './routes/_layout/_authenticated/index'
import { Route as LayoutAuthenticatedBoardsRouteImport } from './routes/_layout/_authenticated/boards/route'
import { Route as LayoutAuthenticatedBoardsBoardNameRouteImport } from './routes/_layout/_authenticated/boards_.$boardName/route'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutAuthenticatedRoute = LayoutAuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => LayoutRoute,
} as any)

const AuthRegisterRouteRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRouteRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutAuthenticatedIndexRoute = LayoutAuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutAuthenticatedRoute,
} as any)

const LayoutAuthenticatedBoardsRouteRoute =
  LayoutAuthenticatedBoardsRouteImport.update({
    id: '/boards',
    path: '/boards',
    getParentRoute: () => LayoutAuthenticatedRoute,
  } as any)

const LayoutAuthenticatedBoardsBoardNameRouteRoute =
  LayoutAuthenticatedBoardsBoardNameRouteImport.update({
    id: '/boards_/$boardName',
    path: '/boards/$boardName',
    getParentRoute: () => LayoutAuthenticatedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRoute
    }
    '/_layout/_authenticated': {
      id: '/_layout/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutAuthenticatedImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/_authenticated/boards': {
      id: '/_layout/_authenticated/boards'
      path: '/boards'
      fullPath: '/boards'
      preLoaderRoute: typeof LayoutAuthenticatedBoardsRouteImport
      parentRoute: typeof LayoutAuthenticatedImport
    }
    '/_layout/_authenticated/': {
      id: '/_layout/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutAuthenticatedIndexImport
      parentRoute: typeof LayoutAuthenticatedImport
    }
    '/_layout/_authenticated/boards_/$boardName': {
      id: '/_layout/_authenticated/boards_/$boardName'
      path: '/boards/$boardName'
      fullPath: '/boards/$boardName'
      preLoaderRoute: typeof LayoutAuthenticatedBoardsBoardNameRouteImport
      parentRoute: typeof LayoutAuthenticatedImport
    }
  }
}

// Create and export the route tree

interface LayoutAuthenticatedRouteChildren {
  LayoutAuthenticatedBoardsRouteRoute: typeof LayoutAuthenticatedBoardsRouteRoute
  LayoutAuthenticatedIndexRoute: typeof LayoutAuthenticatedIndexRoute
  LayoutAuthenticatedBoardsBoardNameRouteRoute: typeof LayoutAuthenticatedBoardsBoardNameRouteRoute
}

const LayoutAuthenticatedRouteChildren: LayoutAuthenticatedRouteChildren = {
  LayoutAuthenticatedBoardsRouteRoute: LayoutAuthenticatedBoardsRouteRoute,
  LayoutAuthenticatedIndexRoute: LayoutAuthenticatedIndexRoute,
  LayoutAuthenticatedBoardsBoardNameRouteRoute:
    LayoutAuthenticatedBoardsBoardNameRouteRoute,
}

const LayoutAuthenticatedRouteWithChildren =
  LayoutAuthenticatedRoute._addFileChildren(LayoutAuthenticatedRouteChildren)

interface LayoutRouteChildren {
  LayoutAuthenticatedRoute: typeof LayoutAuthenticatedRouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAuthenticatedRoute: LayoutAuthenticatedRouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutAuthenticatedRouteWithChildren
  '/auth/login': typeof AuthLoginRouteRoute
  '/auth/register': typeof AuthRegisterRouteRoute
  '/boards': typeof LayoutAuthenticatedBoardsRouteRoute
  '/': typeof LayoutAuthenticatedIndexRoute
  '/boards/$boardName': typeof LayoutAuthenticatedBoardsBoardNameRouteRoute
}

export interface FileRoutesByTo {
  '': typeof LayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRouteRoute
  '/auth/register': typeof AuthRegisterRouteRoute
  '/boards': typeof LayoutAuthenticatedBoardsRouteRoute
  '/': typeof LayoutAuthenticatedIndexRoute
  '/boards/$boardName': typeof LayoutAuthenticatedBoardsBoardNameRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRouteRoute
  '/auth/register': typeof AuthRegisterRouteRoute
  '/_layout/_authenticated': typeof LayoutAuthenticatedRouteWithChildren
  '/_layout/_authenticated/boards': typeof LayoutAuthenticatedBoardsRouteRoute
  '/_layout/_authenticated/': typeof LayoutAuthenticatedIndexRoute
  '/_layout/_authenticated/boards_/$boardName': typeof LayoutAuthenticatedBoardsBoardNameRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/auth/login'
    | '/auth/register'
    | '/boards'
    | '/'
    | '/boards/$boardName'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/auth/login'
    | '/auth/register'
    | '/boards'
    | '/'
    | '/boards/$boardName'
  id:
    | '__root__'
    | '/_layout'
    | '/auth/login'
    | '/auth/register'
    | '/_layout/_authenticated'
    | '/_layout/_authenticated/boards'
    | '/_layout/_authenticated/'
    | '/_layout/_authenticated/boards_/$boardName'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  AuthLoginRouteRoute: typeof AuthLoginRouteRoute
  AuthRegisterRouteRoute: typeof AuthRegisterRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  AuthLoginRouteRoute: AuthLoginRouteRoute,
  AuthRegisterRouteRoute: AuthRegisterRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/auth/login",
        "/auth/register"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/_authenticated"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login/route.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register/route.tsx"
    },
    "/_layout/_authenticated": {
      "filePath": "_layout/_authenticated.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/_authenticated/boards",
        "/_layout/_authenticated/",
        "/_layout/_authenticated/boards_/$boardName"
      ]
    },
    "/_layout/_authenticated/boards": {
      "filePath": "_layout/_authenticated/boards/route.tsx",
      "parent": "/_layout/_authenticated"
    },
    "/_layout/_authenticated/": {
      "filePath": "_layout/_authenticated/index.tsx",
      "parent": "/_layout/_authenticated"
    },
    "/_layout/_authenticated/boards_/$boardName": {
      "filePath": "_layout/_authenticated/boards_.$boardName/route.tsx",
      "parent": "/_layout/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
