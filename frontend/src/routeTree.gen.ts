/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BoardsImport } from './routes/boards'
import { Route as IndexImport } from './routes/index'
import { Route as BoardsBoardIdImport } from './routes/boards.$boardId'
import { Route as AuthRegisterImport } from './routes/auth.register'
import { Route as AuthLoginImport } from './routes/auth.login'

// Create/Update Routes

const BoardsRoute = BoardsImport.update({
  id: '/boards',
  path: '/boards',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BoardsBoardIdRoute = BoardsBoardIdImport.update({
  id: '/$boardId',
  path: '/$boardId',
  getParentRoute: () => BoardsRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/boards': {
      id: '/boards'
      path: '/boards'
      fullPath: '/boards'
      preLoaderRoute: typeof BoardsImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/boards/$boardId': {
      id: '/boards/$boardId'
      path: '/$boardId'
      fullPath: '/boards/$boardId'
      preLoaderRoute: typeof BoardsBoardIdImport
      parentRoute: typeof BoardsImport
    }
  }
}

// Create and export the route tree

interface BoardsRouteChildren {
  BoardsBoardIdRoute: typeof BoardsBoardIdRoute
}

const BoardsRouteChildren: BoardsRouteChildren = {
  BoardsBoardIdRoute: BoardsBoardIdRoute,
}

const BoardsRouteWithChildren =
  BoardsRoute._addFileChildren(BoardsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/boards': typeof BoardsRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/boards/$boardId': typeof BoardsBoardIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/boards': typeof BoardsRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/boards/$boardId': typeof BoardsBoardIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/boards': typeof BoardsRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/boards/$boardId': typeof BoardsBoardIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/boards'
    | '/auth/login'
    | '/auth/register'
    | '/boards/$boardId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/boards' | '/auth/login' | '/auth/register' | '/boards/$boardId'
  id:
    | '__root__'
    | '/'
    | '/boards'
    | '/auth/login'
    | '/auth/register'
    | '/boards/$boardId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BoardsRoute: typeof BoardsRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BoardsRoute: BoardsRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/boards",
        "/auth/login",
        "/auth/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/boards": {
      "filePath": "boards.tsx",
      "children": [
        "/boards/$boardId"
      ]
    },
    "/auth/login": {
      "filePath": "auth.login.tsx"
    },
    "/auth/register": {
      "filePath": "auth.register.tsx"
    },
    "/boards/$boardId": {
      "filePath": "boards.$boardId.tsx",
      "parent": "/boards"
    }
  }
}
ROUTE_MANIFEST_END */
